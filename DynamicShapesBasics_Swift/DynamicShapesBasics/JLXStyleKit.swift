//
//  JLXStyleKit.swift
//  danhuang
//
//  Created by Will on 2/4/17.
//  Copyright Â© 2017 dnahuang.tv. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class JLXStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let theShadowColor: UIColor = UIColor(red: 0.600, green: 0.600, blue: 0.600, alpha: 1.000)
        static let theBorderColor: UIColor = UIColor(red: 0.976, green: 0.659, blue: 0.043, alpha: 1.000)
        static let littleShadow: NSShadow = NSShadow(color: JLXStyleKit.theShadowColor, offset: CGSize(width: 0, height: 2), blurRadius: 6)
    }

    //// Colors

    public dynamic class var theShadowColor: UIColor { return Cache.theShadowColor }
    public dynamic class var theBorderColor: UIColor { return Cache.theBorderColor }

    //// Shadows

    public dynamic class var littleShadow: NSShadow { return Cache.littleShadow }

    //// Drawing Methods

    public dynamic class func drawBubbleButton(frame: CGRect = CGRect(x: 30, y: 26, width: 38, height: 44)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.98684 * frame.width, y: frame.minY + 0.43136 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.55399 * frame.width, y: frame.minY + 0.84881 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.98684 * frame.width, y: frame.minY + 0.64758 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.79746 * frame.width, y: frame.minY + 0.82564 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.95636 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.53323 * frame.width, y: frame.minY + 0.89016 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.95636 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.44601 * frame.width, y: frame.minY + 0.84880 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.95636 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.46677 * frame.width, y: frame.minY + 0.89016 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.01316 * frame.width, y: frame.minY + 0.43136 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20254 * frame.width, y: frame.minY + 0.82564 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.01316 * frame.width, y: frame.minY + 0.64758 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.21397 * frame.width, y: frame.minY + 0.09146 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.01316 * frame.width, y: frame.minY + 0.29162 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.09227 * frame.width, y: frame.minY + 0.16781 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.01136 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.29427 * frame.width, y: frame.minY + 0.04108 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.39311 * frame.width, y: frame.minY + 0.01136 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.98684 * frame.width, y: frame.minY + 0.43136 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.76888 * frame.width, y: frame.minY + 0.01136 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.98684 * frame.width, y: frame.minY + 0.19940 * frame.height))
        bezierPath.close()
        UIColor.white.setFill()
        bezierPath.fill()
        context.saveGState()
        context.setShadow(offset: JLXStyleKit.littleShadow.shadowOffset, blur: JLXStyleKit.littleShadow.shadowBlurRadius, color: (JLXStyleKit.littleShadow.shadowColor as! UIColor).cgColor)
        JLXStyleKit.theBorderColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: frame.minX + 0.97368 * frame.width, y: frame.minY + 0.43263 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.55253 * frame.width, y: frame.minY + 0.84003 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.97368 * frame.width, y: frame.minY + 0.64364 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.78942 * frame.width, y: frame.minY + 0.81742 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.94500 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.53233 * frame.width, y: frame.minY + 0.88039 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.94500 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.44747 * frame.width, y: frame.minY + 0.84003 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.94500 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.46767 * frame.width, y: frame.minY + 0.88039 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.02632 * frame.width, y: frame.minY + 0.43263 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.21058 * frame.width, y: frame.minY + 0.81742 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.02632 * frame.width, y: frame.minY + 0.64364 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.22170 * frame.width, y: frame.minY + 0.10090 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.02632 * frame.width, y: frame.minY + 0.29624 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.10329 * frame.width, y: frame.minY + 0.17541 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.02273 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.29983 * frame.width, y: frame.minY + 0.05173 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.39600 * frame.width, y: frame.minY + 0.02273 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.97368 * frame.width, y: frame.minY + 0.43263 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.76161 * frame.width, y: frame.minY + 0.02273 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.97368 * frame.width, y: frame.minY + 0.20625 * frame.height))
        bezier2Path.close()
        UIColor.white.setFill()
        bezier2Path.fill()
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
